<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ghw.minibox.mapper.MbPostMapper">
    <!-- 1.start 这个Map用来在首页显示帖子列表，随机拿一张图片，懒得重新设计表了-->
    <resultMap type="com.ghw.minibox.entity.MbPost" id="showPostListMap">
        <!--列表主要显示内容-->
        <id property="tid" column="tid" jdbcType="INTEGER"/>
        <result property="uid" column="uid" jdbcType="INTEGER"/>
        <result property="bid" column="bid" jdbcType="INTEGER"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="createDate" column="create_date" jdbcType="TIMESTAMP"/>
        <result property="countComment" column="countComment" jdbcType="INTEGER"/>
        <!--每个帖子，属于哪一个版块-->
        <association property="mbBlock" javaType="com.ghw.minibox.entity.MbBlock">
            <id property="bid" column="bid" jdbcType="INTEGER"/>
            <result property="name" column="name" jdbcType="VARCHAR"/>
        </association>
        <!--首页展示的帖子大图-->
        <collection property="photoList" ofType="com.ghw.minibox.entity.MbPhoto">
            <id property="pid" column="pid" jdbcType="INTEGER"/>
            <result property="photoLink" column="link" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <select id="showPostList" resultMap="showPostListMap">
        SELECT mp.tid,
               mp.bid,
               mp.create_date,
               mp.title,
               mp.uid,
               mb.`name`,
               mpt.pid,
               mpt.link,
               (SELECT count(1) FROM mb_comment mc WHERE mc.tid = mp.tid AND mc.state = 0) AS countComment
        FROM mb_post mp
                 LEFT JOIN mb_block mb ON (mp.bid = mb.bid)
                 LEFT JOIN mb_photo mpt ON (mpt.tid = mp.tid)
        WHERE mpt.type = 'TP'
          AND mpt.state = 0
          AND mb.state = 0
          AND mp.state = 0
          AND mp.post_state = 0
        ORDER BY mp.create_date DESC;
    </select>
    <!-- 1.end -->


    <!-- 2. 帖子详情-->
    <resultMap type="com.ghw.minibox.entity.MbPost" id="MbPostMap">
        <!--帖子内容，帖子ID、帖子标题、帖子内容、帖子发表时间-->
        <id property="tid" column="tid" jdbcType="INTEGER"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="content" column="post_content" jdbcType="VARCHAR"/>
        <result property="createDate" column="create_date" jdbcType="TIMESTAMP"/>
        <!--是谁发的帖子，作者ID、作者昵称、作者等级-->
        <association property="mbUser" javaType="com.ghw.minibox.entity.MbUser">
            <id property="uid" column="author_id" jdbcType="INTEGER"/>
            <result property="nickname" column="nickname" jdbcType="VARCHAR"/>
            <result property="level" column="level" jdbcType="VARCHAR"/>
            <!--作者的头像链接-->
            <association property="mbPhoto" javaType="com.ghw.minibox.entity.MbPhoto">
                <result property="photoLink" column="author_photo_link" jdbcType="VARCHAR"/>
            </association>
        </association>
        <!--帖子正文里所有的图片链接-->
        <collection property="photoList" ofType="com.ghw.minibox.entity.MbPhoto">
            <result property="photoLink" column="post_photo_list_link" jdbcType="VARCHAR"/>
        </collection>
        <!--帖子里的所有评论，包括评论ID、评论内容、评论时间-->
        <collection property="commentList" ofType="com.ghw.minibox.entity.MbComment">
            <id property="cid" column="comment_cid" jdbcType="INTEGER"/>
            <result property="content" column="comment_content" jdbcType="VARCHAR"/>
            <result property="createDate" column="comment_date" jdbcType="TIMESTAMP"/>
            <!--每条评论是谁发的，包含评论人的ID、评论人昵称、评论人等级-->
            <association property="mbUser" javaType="com.ghw.minibox.entity.MbUser">
                <id property="uid" column="comment_user_id" jdbcType="INTEGER"/>
                <result property="nickname" column="comment_user_nickname" jdbcType="VARCHAR"/>
                <result property="level" column="comment_user_level" jdbcType="VARCHAR"/>
                <!--评论人的头像的链接-->
                <association property="mbPhoto" javaType="com.ghw.minibox.entity.MbPhoto">
                    <result property="photoLink" column="comment_user_photo_link" jdbcType="VARCHAR"/>
                </association>
            </association>
            <!--每条评论里的回复，包括回复ID、回复日期、回复内容、回复人的UID、回复了谁-->
            <collection property="replyList" ofType="com.ghw.minibox.entity.MbReply">
                <id property="rid" column="rid" jdbcType="INTEGER"/>
                <result property="replyDate" column="reply_date" jdbcType="TIMESTAMP"/>
                <result property="replyContent" column="reply_content" jdbcType="VARCHAR"/>
                <result property="replyUid" column="who_post_this_reply" jdbcType="INTEGER"/>
                <result property="replyWho" column="this_reply_to_who" jdbcType="INTEGER"/>
                <!--回复人ID、昵称-->
                <association property="mbUser" javaType="com.ghw.minibox.entity.MbUser">
                    <id property="uid" column="reply_user_uid" jdbcType="INTEGER"/>
                    <result property="nickname" column="reply_user_nickname" jdbcType="VARCHAR"/>
                </association>
            </collection>
        </collection>
    </resultMap>

    <select id="showPostDetail" resultMap="MbPostMap">
        SELECT mp.tid,
               mp.title,
               mp.content              AS post_content,
               mp.create_date,

               mu.uid                  AS author_id,
               mu.nickname,

               author_photo_link.link  AS author_photo_link,

               mc.cid                  AS comment_cid,
               mc.content              AS comment_content,
               mc.create_date          AS comment_date,

               comment_user_photo.link AS comment_user_photo_link,

               mulist.uid              AS comment_user_id,
               mulist.nickname         AS comment_user_nickname,
               mulist.level            AS comment_user_level,

               mr.rid,
               mr.reply_date,
               mr.reply_content,
               mr.reply_uid            AS who_post_this_reply,
               mr.reply_who            AS this_reply_to_who,

               reply_user.uid          AS reply_user_uid,
               reply_user.nickname     AS reply_user_nickname,

               post_photo_list.link    AS post_photo_list_link

        FROM mb_post mp
                 LEFT JOIN mb_user AS mu ON (mp.uid = mu.uid)
                 LEFT JOIN mb_photo AS author_photo_link ON (author_photo_link.uid = mu.uid)
                 LEFT JOIN mb_comment AS mc ON (mc.tid = mp.tid)
                 LEFT JOIN mb_photo AS comment_user_photo ON (mc.uid = comment_user_photo.uid)
                 LEFT JOIN mb_user AS mulist ON (mc.uid = mulist.uid)
                 LEFT JOIN mb_reply AS mr ON (mr.reply_in_comment = mc.cid)
                 LEFT JOIN mb_user AS reply_user ON (reply_user.uid = mr.reply_uid)
                 LEFT JOIN mb_photo AS post_photo_list ON (post_photo_list.tid = mp.tid)
        WHERE mp.tid = #{tid}
          AND mp.state = 0
          AND mp.post_state = 0
          AND author_photo_link.type = 'UP'
          AND post_photo_list.type = 'TP'
        ORDER BY mc.create_date DESC;
    </select>
    <!--2. end-->

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="MbPostMap">
        select tid,
               uid,
               bid,
               title,
               content,
               post_state,
               create_date,
               state
        from minibox.mb_post
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="tid" useGeneratedKeys="true">
        insert into minibox.mb_post(uid, bid, title, content)
        values (#{uid}, #{bid}, #{title}, #{content})
    </insert>

    <insert id="insertBatch" keyProperty="tid" useGeneratedKeys="true">
        insert into minibox.mb_post(uid, bid, title, content, post_state, create_date, update_date, state)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.uid}, #{entity.bid}, #{entity.title}, #{entity.content}, #{entity.postState},
            #{entity.createDate}, #{entity.updateDate}, #{entity.state})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="tid" useGeneratedKeys="true">
        insert into minibox.mb_post(uid, bid, title, content, post_state, create_date, update_date, state)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.uid}, #{entity.bid}, #{entity.title}, #{entity.content}, #{entity.postState},
            #{entity.createDate}, #{entity.updateDate}, #{entity.state})
        </foreach>
        on duplicate key update
        uid = values(uid) , bid = values(bid) , title = values(title) , content = values(content) , post_state =
        values(post_state) , create_date = values(create_date) , update_date = values(update_date) , state =
        values(state)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update minibox.mb_post
        <set>
            <if test="uid != null">
                uid = #{uid},
            </if>
            <if test="bid != null">
                bid = #{bid},
            </if>
            <if test="title != null and title != ''">
                title = #{title},
            </if>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            <if test="postState != null and postState != ''">
                post_state = #{postState},
            </if>
            <if test="createDate != null">
                create_date = #{createDate},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate},
            </if>
            <if test="state != null">
                state = #{state},
            </if>
        </set>
        where tid = #{tid}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from minibox.mb_post
        where tid = #{tid}
    </delete>

</mapper>